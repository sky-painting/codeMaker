[1]:codemaker-core增加生成数据库表e-r图的功能，依赖plantuml（down）版本升级到1.0.1
[2]:codemaker-dbops增加生成数据库表e-r图的功能，类似预览功能
[3]:codemaker-core增加代码生成增量功能，对已生成表结构模块做版本快照存储，新生成版本模块在codemaker-web中展示
[4]:codemaker-core增加极速版代码生成特性，具体
   1.引入lombok插件（down）
   2.代码全链路引入调用，从controller->service->mapper生成即可运行，即可测试（down）
[5]:codemaker-core全面梳理其他文件的生成依赖数据，具体
   比如pom.xml需要的公共dependency
   应用application启动类（down）
[6]:增加cola架构代码生成器功能（down）
[7]:增加对枚举数据的代码生成(down some)
[8]:支持dubbo应用类型的代码生成(down)




10. verison 1.2.1-beta 变更(todo)
 1.支持默认带工具类SpringEventPublisher帮助事件发布与消费异步化(down)
 2.重构读取plantUML文件的相关逻辑降低复杂度(down)
 3.重新梳理读取plantUML文件的相关路径,优化为按项目维度分别存放(down)
 4.支持复杂场景下的代码绘制能力,进行精细化控制(如listbo,listvo的转换,代码参数动态绘制引用等)(down)
 5.支持分页PageVO,PageDTO,PageBO生成到接口方法里(down)
 6.支持通过时序图的调用方法列表补充构建接口和类的方法，辅助完善业务调用流程(如xxMapper.getByCode不在XXMapper里，则通过时序图里的信息进行动态补充)(down)
 7.根据动态调用方法绘制内容将return body也进行动态化绘制(down)
 8.增加适配模块解除对codemaker本身的定制化类的依赖(ResultDto,ResultDataDto,PageVO,PageDTO)，可辅助二次开发增加企业适配能力(down)
 9.基于数据库生成模式下的底层增加分页page查询方法和count查询方法(down)
 10.重构app层下的springboot,cola,dubbo写文件实现逻辑，降低复杂度(down)
 11.重构service层下的模版方法模式和建造者模式代码逻辑，降低复杂度(down)
 12.增加mapper接口和controller接口的参数校验注解(要引用的注解类可先写死，后续优化)(down)
 13.增加时序图调用方法参数动态推导功能(如xxxGataWay.getBySystemName没有在领域文档中定义，在时序图中有定义但是没有写明参数，这里可以做动态推导)
 14.补充bo关联表时缺失的主键id(down)
 15.增加!字符屏蔽不需要解析的planUML文档内容,便于调试代码生成(down)


1.2.2 版本(主要支持配置化，组件插件化，模块化架构,去除对coderutils的强依赖)
 1.支持按领域上下文和request,response分包策略，达到动态分包的效果(可全部平铺也可以按上下文分子包)(down)
 2.增加接口按服务维度持久化功能,基于文件(辅助对上下游适配层进行方法生成)，api文件生成-->集中式(这里持久化可能不是最优方案，已通过组件化架构升级解决)
 3.重构包动态引用模块，支持自定义引用包配置化,配置文件配置,支持组件插件化架构(已通过组件化架构升级解决)
 4.支持从plantuml领域文档中导出接口文档(down)
 5.支持动态query查询对象完善动态查询逻辑(down)
 6.增加自定义class类模版组件类，注册其他外部jar包类或者公共业务类，如PageBO,XxxUtils,MybatisConfig或者CommonService等(已通过组件化架构升级解决)
 7.支持业务领域DSL统一语言(读写操作)注册功能，扩展读写场景模式校验 ReadWriteTypeEnum-->基于自定义配置(down)
 8.增加cache类代码元素生成(down)
 9.增加create,response bo-->dto/vo的关联类型推导，辅助完善dto/vo模型
 10.支持事件发布异步化的代码绘制(产生事件->发布->消费事件)(down)
 11.增加多个配置项支持组件插件化-->具体配置项(down)
 12.去除IClazzAdapter包模块，升级为plantUML文档依赖的可配置包(down)
 13.去除对coderman-utils包的强依赖,将其通过组件化架构改为弱依赖(down)
 14.通过派生类上下文对象提前初始化重构类转换工厂，减少冗余代码(down)
 15.对相对独立的工具类代码进行组件化管理，按场景需要进行动态化配置(down)
 16.删除相对独立的工具类代码生成逻辑，根据16条整体改善(down)
 17.增加cola应用的cola-feign-api模块，支持spring cloud 远程调用(down)
 18.增加codemaker-springcloud应用，来专门支持springcloud技术栈(down)
 19.增加feign类代码元素，与dubbo类似，提供api接口和参数并提供动态生成能力(down)
 20.重构codeMaker模块,增加codemaker-api,codemaker-apiImpl模块开放低代码设计模型,组件扫描,代码元素装饰接口能力
 21.根据20条的改动整体支持组件化和提供二次开发能力(down)








 思考总结
 12.增加多个配置项支持组件插件化
 13.组件类型:业务服务包，中间件包，自定义封装工具包，自定义工具独立类
 14.设计思想:兼容并蓄,在codemaker的组件化架构设计中一切业务组件，中间件，脚手架都是组件都是可配置的。




1.3.0 版本(进行一次整体的架构升级)
 1.支持在调用时序中增加自定义流程控制语句如if else,fori,fore,fors,filter,mappingby,groupby(该方案容易导致时序图过于细化同时时序图不容易表达代码化的东西，已通过javsScript解决)
 2.支持可配置化的多种入参校验模式策略(方案设计)(down)
 3.支持在plantuml领域文档中增加方法注解并解析生成到项目代码里(transactional,lock,logrecord注解等)(down)
 4.降低对数据库链接的强依赖，以数据库e-r图或者excel表作为数据库元数据信息的来源(链接默认数据库即可)(down)
 5.自定义代码元素模板/片段，并融入到代码生成流程中，进一步开放代码生成能力接口(方案设计)(代码元素模板自定义实现完成 down)
 6.自定义代码元素模板/片段，并融入到动态调用时序中(同第一点，代码片段可能需要结合JavsScript构建方法内容)
 7.在代码生成流程中调用时序中增加代码段(同第一点)
 8.在代码生成流程中调用时序识别范型
 9.增加配置项相关代码生成(方案设计)(down)
 10.将数据库sql文件复制到项目工程里(down)
 11.将plantUMl文档调用时序文档复制到项目工程里(down)
 12.打通语雀等api文档管理软件(技术上存在问题,不一定完全兼容)
 13.管理pom依赖,走自动生成,统一maven技术栈(down)
 14.扩展plantUML生成代码时允许依赖外部代码类(如plantUML类中定义了xxxBO,但是需要显示的继承BaseBO,BaseBO可以不用单独声明class)(?)
 15.基于plantUML 的e-r图模式构建数据库模型(down)
 16.支持mybatis-plus组件,网关组件,脚手架等案例适配(mp,liteflow down)
 17.使用map+function重构各个应用类型下的代码生成逻辑(down)
 18.支持每个组件的配置项同步到项目工程中(down)
 19.新建codemaker-javs集成javs引擎(down)
 20.增加参数配置是否集成javs并生成javs脚本项目(down)
 21.支持纯数据库模式引入配置信息生成，自定义类信息生成，支持自定义组件导入(down)
 22.支持极速模式引入配置信息生成，自定义类信息生成，支持自定义组件导入(down)


 6.支持
 基于数据库模式，
 基于e-r图模式或者excel模式(e-r图模式down)，
 基于动态DDD领域文档模式，
 基于动态DDD领域文档+数据库模式，
 基于动态DDD领域文档+数据库/e-r图模式+调用时序文档模式

1.4 平台化,是否具有平台化的能力
 1.持久层存储(低代码底层表结构设计)
 2.页面交互设计(web页面配置交互)




