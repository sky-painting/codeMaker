
#数据库名称
cola.global.dbName=infosys_auth
#cola.global.dbName=infosys_express

#应用名称，作为工程名称
cola.global.applicationName=infosys-auth
#cola.global.applicationName=infosys-express

#应用别名与目标工程输出目录一致
cola.global.applicationNameAlias=auth
#cola.global.applicationNameAlias=express


#maven坐标-GAV---父级模块的GAV信息
cola.pom.parent.groupId=com.coderman.infosys.express
cola.pom.parent.artifactId=infosys-express
cola.pom.parent.version=1.0.0.SNAPSHOT

cola.code.app.project.path=/Users/shenshuai/scworkspace/myspace/code-maker

#目标工程输出目录，这里填写对应的工程的绝对路径
#cola.code.outpath.cola-adapter=/Users/shenshuai/myspace/code-maker/codemaker-cola/cola-adapter
#cola.code.outpath.cola-infrast=/Users/shenshuai/myspace/code-maker/codemaker-cola/cola-infrast
#cola.code.outpath.cola-app=/Users/shenshuai/myspace/code-maker/codemaker-cola/cola-app
#cola.code.outpath.cola-domain=/Users/shenshuai/myspace/code-maker/codemaker-cola/cola-domain
#cola.code.outpath.cola-client=/Users/shenshuai/myspace/code-maker/codemaker-cola/cola-client
#cola.code.outpath.cola-start=/Users/shenshuai/myspace/code-maker/codemaker-cola/cola-start
#cola.code.outpath.cola-feign-api=/Users/shenshuai/myspace/code-maker/codemaker-cola/cola-feign-api

#应用服务的plantUML类图文件,不配置则走基于数据表的方式生成代码
#cola.domain.plantuml=express-domain.puml
cola.domain.plantuml=auth-domainV5.puml

#是否构建api 文档，否则进行构建,默认构建
cola.api.generator=true
#是否将调用时序文档同步到项目工程里,默认同步
cola.plantumldoc.sync=true

#需要导入的组件列表，多个逗号分割,适用于cola模块下依赖的业务组件包或者对外api接口包，或者cola项目本身已有的代码类,或者其他偏业务的工具类组件等等。
#如要生成的项目会依赖 infosys-user 服务的api则在这里定义即可。
cola.component.scan.config=apiresult,infosysuser,hutool-core,mybatis-plus,springcloudalibaba-rocketmq
#cola.component.scan.config=apiresult,infosysuser,hutool-core,mybatis-plus,liteflow,rocketmq,springboot-redis

#需要在领域文档和调用时序文档中识别的读操作统一语言
cola.component.dsl.read=check

#需要在领域文档和调用时序文档中识别的写操作统一语言
cola.component.dsl.write=settle,apply

#是否需要根据该参数设置请求参数的最后一级包名为request,默认false
cola.subpackage.request=true

#是否需要根据该参数设置相应参数的最后一级包名为response,默认false
cola.subpackage.response=true



#应用级组件中间件工具包的组件扫描bean配置
cola.component.scan.beans=appCompScanService

#应用级组件中间件工具包的组件装饰bean配置
cola.component.decorate.beans=appCompDecorateService,mybatisPlusDecorateService
#cola.component.decorate.beans=appCompDecorateService,mybatisPlusDecorateService,liteFlowDecorateService

#应用级代码参数dto,vo所需要的参数验证逻辑构建bean,内置五种实现
#支持validateAopService,validateJSRHibernateService,validateParamService,validateUtilService,validateServiceValidator
cola.component.validate.beans=validateParamService,validateServiceValidator


#代码工具类注册，项目初始化时可以帮助初始化对应的工具类
#后面生成代码的时候可以删掉工具类，只专注于生成业务代码
#格式说明 eg:BaseEvent:core 前面是需要初始化的类，后面是这个类放到哪个模块下
cola.component.init.clazz=BaseEvent:domain,Application:start,BaseController:adapter,PageBO:domain,SpringApplicationContext:domain,AppEventPublisher:domain,LockA:domain,MqHandler:domain,IdemPotent:domain

#项目各个模块需要依赖的pom gav配置
#cola.component.init.pom=apiresult:adapter,apiresult:client,hutool-core:app,hutool-core:adapter,apiresult:feignapi,mybatis-plus:infrast,liteflow:domain,rocketmq:infrast,springboot-redis:infrast
cola.component.init.pom=apiresult:adapter,apiresult:client,hutool-core:app,hutool-core:adapter,apiresult:feignapi,mybatis-plus:infrast,springcloudalibaba-rocketmq:infrast

#自定义ftl代码元素,eg  ftlFileName:classType:moduleName
cola.code.template.custom.ftl=validator:class:app,cmp:class:app

#项目各个模块需要导入的配置文件
#cola.component.init.config=application_properties:start,log4j_properties:start,mybatis-config_xml:infrast,liteflow_properties:start
cola.component.init.config=application_properties:start,log4j_properties:start,mybatis-config_xml:infrast
