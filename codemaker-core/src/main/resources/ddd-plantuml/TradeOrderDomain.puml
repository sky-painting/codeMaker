@startuml



enum "交易单类型-OrderTypeEnum" as OrderTypeEnum{
    BILL_ORDER("bill_order","账单"),
    TRADE_ORDER("trade_order","主交易单"),
    TRADE_SUB_ORDER("trade_sub_order","子交易单"),
    TRADE_PAYMENT("trade_payment_order","支付单");

    交易单code:String code
    交易单描述:String desc
    static OrderTypeEnum getByCode(String code)
}



package com.xxx.xx.bo {
    class "主交易单-tradeOrderBO" as tradeOrderBO{
	    -主交易单code:String tradeOrderCode
        -主交易单类型:String tradeOrderType
	    #主交易单状态:int status
        #主业务单号:String mainBizOrderCode
        -创建变更日志:TradeOrderLogBO buildTradeOrderLogBO()
    }

    class "子交易单-tradeSubOrderBO" as tradeSubOrderBO{
	    子交易单code:String subOrderCode
	    子交易单类型:String subOrderType
	    子交易单状态: int status
	    业务订单编号: String bizOrderCode
	    主交易单code: String tradeOrderCode
	    TradeOrderLogBO buildTradeOrderLogBO()
    }


    class "交易账单-TradeBillOrderBO" as TradeBillOrderBO  {
	    账单号:String billOrderCode
        账单金额:Long billAmount
        关联的子交易单列表:List<TradeSubOrderBO> tradeSubOrderBOList
        TradeOrderLogBO buildTradeOrderLogBO()
    }

    class "账单与支付单关系-tradeBillPaymentBO" as tradeBillPaymentBO {
	    账单号:String billOrderCode
	    支付交易单号:String paymentOrderCode
	    支付交易单金额:Long paymentAmount
        已支付金额:Long paidAmount
	    签名:String sign
	    支付交易单状态:int status
	    TradeOrderLogBO buildTradeOrderLogBO()
    }

    class "单据操作变更日志-tradeOrderLogBO" as tradeOrderLogBO{
        单据类型:String orderType
        操作类型:String operationType
        单据编号:String orderCode
        操作前状态:int beforeStatus
        操作后状态:int afterStatus
        操作前单据快照:String beforeSnapShotJson
        操作后单据快照:String afterSnapShotJson
    }

}


package com.xxx.xx.msgbody {
    class "主交易单状态变更消息体-tradeOrderStatusChangeMsgBody" as TradeOrderStatusChangeMsgBody{
	    -主交易单code:String tradeOrderCode
        #主交易单状态:int status
        #主交易单状态描述:String statusStr
        #主业务单号:String mainBizOrderCode
    }

    class "支付结果消息-paymentResultMsgBody" as PaymentResultMsgBody{
	    -支付单号:String paymentOrderCode
	    #支付单状态:int status
	    #支付单状态描述:String statusStr
        #支付金额:long paidAmount
    }
}

package com.xxx.xx.gataway {
    interface "交易单仓库服务-TradeOrderRepository" as TradeOrderRepository{
        创建主交易单 String createMainOrder(TradeOrderBO tradeOrderBO)
        创建子交易单 String createSubOrder(TradeSubOrderBO tradeSubOrderBO)
        创建账单 String  createBillOrder(TradeBillOrderBO tradeBillBO)
        创建支付单 TradeBillPaymentBO createPaymentOrder(TradeBillPaymentBO tradeBillPaymentBO)
    }

    interface "交易单查询服务-TradeOrderQueryGataway" as TradeOrderQueryGataway{
        查询主交易单 TradeOrderBO queryMainOrder(String orderCode)
        查询子交易单 TradeSubOrderBO querySubOrder(String subOrderCode)
        查询账单 TradeBillOrderBO  queryBillOrder(String billOrderCode)
        查询支付单 TradeBillPaymentBO queryPaymentOrder(String paymentOrderCode)
    }
}


package com.xxx.xx.factory {
    class "单据操作日志工厂-TradeOrderLogFactory" as TradeOrderLogFactory{
        保存单据操作日志 String createTradeOrderLog(TradeOrderLogBO tradeOrderLogBO)
        获取某一条单据的变更历史 List<TradeOrderLogBO> getOrderLogList(String orderType,String orderCode)
    }
}



@enduml